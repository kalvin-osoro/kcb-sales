apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: "{{ .Values.appName }}-backend"
spec:
  host: "{{ .Values.appName }}-backend-kcb-ses-poc.apps.dev.aro.kcbgroup.com"
  port:
    targetPort: 8080
  to:
    kind: Service
    name: "{{ .Values.appName }}-backend"
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.appName }}-backend"
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: "{{ .Values.appName }}-backend"
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    image.openshift.io/triggers: >-
      [
        {
          "from": {
            "kind":"ImageStreamTag",
            "name":"{{ .Values.appName }}-backend:latest"
          },
          "fieldPath":"spec.template.spec.containers[?(@.name==\"{{ .Values.appName }}-backend\")].image",
          "pause":"false"
        }
      ]
  name: "{{ .Values.appName }}-backend"
  labels:
    app: "{{ .Values.appName }}-backend"
spec:
  selector:
    matchLabels:
      app: "{{ .Values.appName }}-backend"
  serviceName: "{{ .Values.appName }}-backend"
  replicas: 0
  minReadySeconds: 20
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}-backend"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: "{{ .Values.appName }}-backend"
        image: "{{ .Values.appName }}-backend:latest"
        env:
          {{ if eq .Values.db.external false }}
          - name: DB_HOST
            value: "{{ .Values.appName }}-mysql"
          - name: DB_PORT
            value: "3306"
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.secretName }}" 
                key: "{{ .Values.db.databaseNameKey }}"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.secretName }}" 
                key: "{{ .Values.db.usernameKey }}"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.secretName }}" 
                key: "{{ .Values.db.passwordKey }}"
          {{ else }}
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.externalParams.secretName }}" 
                key: "{{ .Values.db.externalParams.hostNameKey }}"
          - name: DB_PORT
            value: "3306"
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.externalParams.secretName }}" 
                key: "{{ .Values.db.externalParams.databaseNameKey }}" 
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.externalParams.secretName }}" 
                key: "{{ .Values.db.externalParams.userKey }}" 
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.db.externalParams.secretName }}" 
                key: "{{ .Values.db.externalParams.passwordKey }}" 
          {{ end }}
        ports:
        - containerPort: 8080
          name: web
        volumeMounts:
        - name: uploads
          mountPath: /app/upload
  volumeClaimTemplates:
  - metadata:
      name: uploads
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "managed-premium"
      resources:
        requests:
          storage: 3Gi